{"version":3,"sources":["app.js"],"names":["document","addEventListener","querySelectorAll","moveCounter","querySelector","cards","createGame","shuffledCards","array","currentIndex","length","createEventListeners","randomIndex","floor","Math","random","temporaryValue","shuffle","deck","fragment","createDocumentFragment","x","_i$classList","li","createElement","i","cardClasses","firstElementChild","classList","add","apply","_toConsumableArray","appendChild","newCards","forEach","card","e","openedCards","firstCard","secondCard","target","nodeName","className","includes","showCard","moves","textContent","push","children","split","setTimeout","checkCards","remove"],"mappings":"sJAAAA,SAASC,iBAAiB,mBAAoB,WAA9CD,IAAAA,EAAAA,GAAAA,OAAAA,mBAASC,SAAiBC,iBAAoB,WAMtCC,EAAcH,SAASI,cAAc,UAFrCC,GAGQL,SAASI,cAAc,UAH/BC,GAEAF,EAAcH,GAYpB,SAASM,IACP,IAAMC,EAkCR,SAAiBC,GALf,IAAAC,EAAAD,EAAAE,OACAC,OAAAA,EACDC,OAAAA,EAED,KAAA,IAAAH,GACAG,EAAiBJ,KAAjBK,MAAwBC,KAAAC,SAAAN,GAEtBO,EAAIA,EADJP,GAAIA,GAEJD,EAAII,GAAJJ,EAAAI,GAOEJ,EAAMI,GAAeI,EAHrBP,OAAAA,EAzCoBQ,CAAQZ,GACxBa,EAAOlB,SAASI,cAAc,SAC9Be,EAAWnB,SAASoB,yBAD1BF,EAAMA,UAAOlB,GACbG,EAAMgB,YAAoBC,EAS1B,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAcG,OAAQW,IAAK,CAAA,IAAAC,EAH/CC,EAAAvB,SAAAwB,cAAA,MAKQC,EAAIzB,SAASwB,cAAc,KAFYE,EAAAnB,EAAAc,GAAAM,kBAAAC,UAE7CL,EAAAK,UAAU5B,IAASwB,SAOnBF,EAAAG,EAAEG,WAAUC,IAAZC,MAAAR,EAAAS,mBAAmBL,IAJnBH,EAAAS,YAAMN,GAONP,EAASa,YAAYT,GAIvBL,EAAKc,YAAYb,GAmCXc,GAAAA,OAAAA,mBAAejC,SAASE,iBAAiB,WAEtCgC,QAAQ,SAAAC,GAAA,OACfA,EAAKlC,iBAAiB,QAAS,SAAAmC,GAkCjCC,IAQMC,EALRC,EAXCJ,EA3BCC,EAoBMV,EAvBN,OAAAU,EAAAI,OAAAC,YAuBMf,GApBNU,EAFMH,GAsBgBO,OAAOE,WAGZC,SAAS,SAAYjB,EAAYiB,SAAS,UAL7DP,EAAAI,OAASI,UAAYf,IAAA,OAAA,QAoCpBgB,IAOC1C,EAAY2C,YAAcD,GAlC3BV,EAtBeC,EAsBfI,OAEDH,EAAAU,KAAAZ,GA5B0B,IAAtBA,EAAKlC,SA0CDqC,EAAYD,EAAY,GAAGW,SAAS,GAAGN,UAAUO,MAAM,KAAK,GALpEV,EAAAF,EAAA,GAAAW,SAAA,GAAAN,UAAAO,MAAA,KAAA,GAGAC,WAASC,WACPb,IAAAC,GA4BDF,EAAAH,QAAA,SAAAC,GAOGA,EAAKP,UAAUC,IAAI,aAGrBQ,EAAc,GAJdA,IAODA,EAAAH,QAAA,SAAAC,GAOGA,EAAKP,UAAUwB,OAAO,OAAQ,UAEhCf,EAAc,KA7Cda,WAoDAb,SAAAA,cAAA,YAAApC,iBAAA,QAAA,WARC4C,EAFD,EAIDR,EAAA,GAcC/B,MAAAA","file":"app.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n  /*\n  * Create a array that holds all of your cards\n  */\n  const cards = [...document.querySelectorAll('.card')];\n  // Create global variables\n  const moveCounter = document.querySelector('.moves');\n  const stars = document.querySelector('.stars');\n  let moves = 0;\n  let matchedCards = 0;\n  let openedCards = [];\n\n  /*\n  * Display the cards on the page\n  *   - shuffle the list of cards using the provided \"shuffle\" method below\n  *   - loop through each card and create its HTML\n  *   - add each card's HTML to the page\n  */\n  function createGame() {\n    const shuffledCards = shuffle(cards);\n    const deck = document.querySelector('.deck');\n    const fragment = document.createDocumentFragment();\n\n    // Reset HTML DOM\n    deck.innerHTML = '';\n    moveCounter.textContent = moves;\n\n    /**\n     * Create the HTML for each card and add to the Document Fragment\n     */\n    for (let x = 0; x < shuffledCards.length; x++) {\n      const li = document.createElement('li');\n      const i = document.createElement('i');\n\n      // Get classes for the symbol to be displayed on the card\n      const cardClasses = shuffledCards[x].firstElementChild.classList;\n\n      // Apply the classes to each card\n      li.classList.add('card');\n      i.classList.add(...cardClasses);\n\n      li.appendChild(i);\n      fragment.appendChild(li);\n    }\n\n    // Add new deck to HTML DOM\n    deck.appendChild(fragment);\n\n    // Add event listeners to newly created DOM Elements\n    createEventListeners();\n  }\n\n  // Shuffle function from http://stackoverflow.com/a/2450976\n  function shuffle(array) {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  /*\n  * set up the event listener for a card. If a card is clicked:\n  *  - display the card's symbol (put this functionality in another function that you call from this one)\n  *  - add the card to a *list* of \"open\" cards (put this functionality in another function that you call from this one)\n  *  - if the list already has another card, check to see if the two cards match\n  *    + if the cards do match, lock the cards in the open position (put this functionality in another function that you call from this one)\n  *    + if the cards do not match, remove the cards from the list and hide the card's symbol (put this functionality in another function that you call from this one)\n  *    + increment the move counter and display it on the page (put this functionality in another function that you call from this one)\n  *    + if all cards have matched, display a message with the final score (put this functionality in another function that you call from this one)\n  */\n  function createEventListeners() {\n    // Select new cards from DOM\n    const newCards = [...document.querySelectorAll('.card')];\n\n    newCards.forEach(card =>\n      card.addEventListener('click', e => {\n        // Only handle the click event for \"li\" elements\n        if (e.target.nodeName === 'LI') {\n          showCard(e);\n          addCard(e);\n\n          if (openedCards.length === 2) {\n            checkCards();\n          }\n        }\n      }),\n    );\n  }\n\n  /**\n   * Display the card that has been clicked on\n   */\n  function showCard(e) {\n    // Grab the classes of the card that has been clicked\n    const cardClasses = e.target.className;\n\n    // Check if the card has been opened, if not, open the card\n    if (!cardClasses.includes('show') && !cardClasses.includes('open')) {\n      e.target.classList.add('show', 'open');\n      countMoves();\n    }\n  }\n\n  /**\n   * Add card to a array of all open cards\n   */\n  function addCard(e) {\n    const card = e.target;\n\n    openedCards.push(card);\n  }\n\n  /**\n   * Check if the cards currently selected match\n   */\n  function checkCards() {\n    // Get the descriptive classname for both cards (fa-bolt, fa-cube)\n    const firstCard = openedCards[0].children[0].className.split(' ')[1];\n    const secondCard = openedCards[1].children[0].className.split(' ')[1];\n\n    // Allow for a delay so that both cards are showed to the user\n    setTimeout(() => {\n      if (firstCard === secondCard) {\n        cardsMatched();\n      } else {\n        cardsNotMatched();\n      }\n    }, 600);\n  }\n\n  /**\n   * Count moves each time card is clicked\n   */\n  function countMoves() {\n    moves++;\n    moveCounter.textContent = moves;\n\n    // if (moves > 10) {\n    //   stars.removeChild(stars.childNodes[0]);\n    // } else if (moves > 20) {\n    //   stars.removeChild(stars.childNodes[0]);\n    // } else {\n    //   stars.removeChild(stars.childNodes[0]);\n    // }\n  }\n\n  /**\n   * If the cards match, lock them. Also count each group of cards that are matched\n   */\n  function cardsMatched() {\n    openedCards.forEach(card => {\n      card.classList.add('matched');\n    });\n    // Reset current selected cards \"tracking\"\n    openedCards = [];\n    // Count the amount of matched pairs\n    matchedCards++;\n  }\n\n  /**\n   * If the cards do not match, hide them and reset opened cards array\n   */\n  function cardsNotMatched() {\n    openedCards.forEach(card => {\n      card.classList.remove('show', 'open');\n    });\n    openedCards = [];\n  }\n\n  function resetGame() {\n    // Reset global variables\n    moves = 0;\n    matchedCards = 0;\n    openedCards = [];\n  }\n\n  /**\n   * Restart the game\n   */\n  document.querySelector('.restart').addEventListener('click', () => {\n    resetGame();\n    createGame();\n  });\n\n  /**\n   * Start the game on page load\n   */\n  createGame();\n});\n"]}