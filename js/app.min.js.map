{"version":3,"sources":["app.js"],"names":["document","addEventListener","cards","querySelectorAll","openedCards","shuffledCards","createEventListeners","temporaryValue","randomIndex","currentIndex","array","length","floor","Math","random","shuffle","deck","querySelector","fragment","createDocumentFragment","innerHTML","x","li","createElement","i","firstElementChild","className","cardClasses","appendChild","forEach","card","e","add","cardName","target","classList","contains","push"],"mappings":"sJAAAA,SAASC,iBAAiB,mBAAoB,WAK9C,IAAMC,EAAAA,GAAAA,OAAAA,mBAAYF,SAASG,iBAAiB,YAQ5C,WACE,IAwDIC,EAxDEC,EA2BNC,SAAAA,GAGF,IAFC,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,OAED,IAAAF,GACAD,EAAiBE,KAAOE,MAAAC,KAAAC,SAAAL,GACaF,EAAjCG,EAAID,GAAeC,GAA8BF,EAAAA,GAAjDE,EAAAF,GAOIE,EAAMF,GAAeD,EAHrBE,OAAAA,EApCgBM,CAAQb,GACxBc,EAAOhB,SAASiB,cAAc,SAC9BC,EAAWlB,SAASmB,yBAD1BH,EAAAI,UAAapB,GASb,IAAK,IAAIqB,EAAI,EAAGA,EAAIhB,EAAcM,OAAQU,IAAK,CAH/C,IAAAC,EAAAtB,SAAAuB,cAAA,MAKQC,EAAIxB,SAASuB,cAAc,KAD3BD,EAAcC,EAAcF,GAAAI,kBAAlCC,UAMAJ,EAAGI,UAAY,OAHfF,EAAAE,UAAAC,EAMAL,EAAGM,YAAYJ,GAHfF,EAAGI,YAAYJ,GAIfJ,EAAAA,YAASU,GAmCPxB,EAAc,GACZF,GAAAA,OAAAA,mBAAYF,SAASG,iBAAiB,WACtC0B,QAAQ,SAAAC,GAAA,OAAQA,EAAK7B,iBAAiB,QAAS,SAAC8B,GAkBpDA,IAAmBC,EACpBC,EAnBaF,EAKfJ,GAAAA,GALeI,EACHA,GAIZG,OAAAC,WAUiBC,SAAS,SAAWT,EAAYS,SAAS,SAJzDL,EAAAG,OAAAC,UAAAH,IAAA,OAAA,QAOqBA,EAhBF5B,EAiBlB6B,EAjB+BF,EAiB/BG,OAAAT,kBAAAU,UAAA,GASD/B,EAAYiC,KAAKJ,OAAjB7B","file":"app.min.js","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\n\n/*\n * Create a list that holds all of your cards\n */\nconst cards = [...document.querySelectorAll('.card')];\n\n/*\n * Display the cards on the page\n *   - shuffle the list of cards using the provided \"shuffle\" method below\n *   - loop through each card and create its HTML\n *   - add each card's HTML to the page\n */\nfunction createGame() {\n  const shuffledCards = shuffle(cards);\n  const deck = document.querySelector('.deck');\n  const fragment = document.createDocumentFragment();\n\n  // Reset HTML DOM\n  deck.innerHTML = '';\n\n  /**\n   * Create HTML for each card and add to Document Fragment\n   */\n  for (let x = 0; x < shuffledCards.length; x++) {\n    const li = document.createElement('li');\n    const i = document.createElement('i');\n\n    // Get classes for the symbol to be displayed on the card\n    const cardClasses = shuffledCards[x].firstElementChild.className;\n\n    li.className = 'card';\n    i.className = cardClasses;\n\n    li.appendChild(i);\n    fragment.appendChild(li);\n  }\n\n  // Add new deck to HTML DOM\n  deck.appendChild(fragment);\n\n  createEventListeners();\n};\n\n// Shuffle function from http://stackoverflow.com/a/2450976\nfunction shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n};\n\n/*\n * set up the event listener for a card. If a card is clicked:\n *  - display the card's symbol (put this functionality in another function that you call from this one)\n *  - add the card to a *list* of \"open\" cards (put this functionality in another function that you call from this one)\n *  - if the list already has another card, check to see if the two cards match\n *    + if the cards do match, lock the cards in the open position (put this functionality in another function that you call from this one)\n *    + if the cards do not match, remove the cards from the list and hide the card's symbol (put this functionality in another function that you call from this one)\n *    + increment the move counter and display it on the page (put this functionality in another function that you call from this one)\n *    + if all cards have matched, display a message with the final score (put this functionality in another function that you call from this one)\n */\nfunction createEventListeners() {\n  let openedCards = [];\n  const cards = [...document.querySelectorAll('.card')];\n  cards.forEach(card => card.addEventListener('click', (e) => {\n    openCard(e);\n    checkOpenedCards(openedCards, e);\n  }));\n\n};\n\n/**\n * Display the card that has been clicked on\n */\nfunction openCard(e) {\n  // Grab the classes of the card that has been clicked\n  const cardClasses = e.target.classList;\n\n  // Check if the card has been opened, if not, open the card\n  if (cardClasses.contains('show') && cardClasses.contains('open')) {\n    return;\n  } else {\n    e.target.classList.add('show', 'open');\n  }\n};\n\n/**\n * Hold a list of all open cards\n */\nfunction checkOpenedCards(openedCards, e) {\n  const cardName = e.target.firstElementChild.classList[1];\n  // Add the card name to the array\n  openedCards.push(cardName);\n\n};\n\n/**\n * Start the game\n */\ncreateGame();\n});\n"]}