{"version":3,"sources":["app.js"],"names":["document","addEventListener","cards","querySelectorAll","openedCards","shuffledCards","deck","appendChild","temporaryValue","randomIndex","currentIndex","array","length","Math","floor","random","shuffle","querySelector","fragment","createDocumentFragment","innerHTML","x","_i$classList","li","createElement","i","cardClasses","firstElementChild","classList","apply","_toConsumableArray","forEach","card","e","cardName","target","contains","add","push","createGame"],"mappings":"sJAAAA,SAASC,iBAAiB,mBAAoB,WAK9C,IAAMC,EAAAA,GAAAA,OAAAA,mBAAYF,SAASG,iBAAiB,YAQ5C,WACE,IAwDIC,EAxDEC,EAyBNC,SAAKC,GAGN,IAIG,IAAiCC,EAAgBC,EAA7CC,EAAeC,EAAMC,OAJ5B,IAAAF,GAOOD,EAAcI,KAAKC,MAAMD,KAAKE,SAAWL,GAJjDF,EAAAG,EADAD,GAAA,GAEQA,EAAAA,GAAqBE,EAAzBH,GAAiCD,EAAAA,GAAjCA,EAEA,OAAOE,EAlCaM,CAAQd,GACxBI,EAAON,SAASiB,cAAc,SAC9BC,EAAWlB,SAASmB,yBAD1Bb,EAAAc,UAAapB,GASb,IAAK,IAAIqB,EAAI,EAAGA,EAAIhB,EAAcO,OAAQS,IAAK,CAAA,IAAAC,EAH/CC,EAAAvB,SAAAwB,cAAA,MAKQC,EAAIzB,SAASwB,cAAc,KAFYE,EAAArB,EAAAgB,GAAAM,kBAAAC,UAC7CL,EAAAK,UAAW5B,IAAAA,SACXsB,EAAAG,EAAAG,WAAU5B,IAAV6B,MAAAP,EAAAQ,mBAAmBN,IAEnBD,EAAAhB,YAAAkB,GACAP,EAAMQ,YAAcrB,GAUtBC,EAAKC,YAAYW,GA+Bbd,EAAc,GACZF,GAAAA,OAAAA,mBAAYF,SAASG,iBAAiB,WACtC4B,QAAQ,SAAAC,GAAA,OAAQA,EAAK/B,iBAAiB,QAAS,SAACgC,GAgBpD,IAAA7B,EADF8B,EAdED,EADYP,GAAAA,GACZO,EAASA,GADGE,OAAAP,WAeEQ,SAAS,SAAWV,EAAYU,SAAS,SAGvDH,EAAEE,OAAOP,UAAUS,IAAI,OAAQ,QAF/BjC,EAdiBA,EAanB8B,EAbgCD,EAezBE,OAAAR,kBAAAC,UAAA,GAENxB,EAAAkC,KAAAJ,OAODK","file":"app.min.js","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\n\n/*\n * Create a list that holds all of your cards\n */\nconst cards = [...document.querySelectorAll('.card')];\n\n/*\n * Display the cards on the page\n *   - shuffle the list of cards using the provided \"shuffle\" method below\n *   - loop through each card and create its HTML\n *   - add each card's HTML to the page\n */\nfunction createGame() {\n  const shuffledCards = shuffle(cards);\n  const deck = document.querySelector('.deck');\n  const fragment = document.createDocumentFragment();\n\n  // Reset HTML DOM\n  deck.innerHTML = '';\n\n  /**\n   * Create the HTML for each card and add to Document Fragment\n   */\n  for (let x = 0; x < shuffledCards.length; x++) {\n    const li = document.createElement('li');\n    const i = document.createElement('i');\n\n    // Get classes for the symbol to be displayed on the card\n    const cardClasses = shuffledCards[x].firstElementChild.classList;\n\n    li.classList.add('card');\n    i.classList.add(...cardClasses);\n\n    li.appendChild(i);\n    fragment.appendChild(li);\n  }\n\n  // Add new deck to HTML DOM\n  deck.appendChild(fragment);\n\n  createEventListeners();\n};\n\n// Shuffle function from http://stackoverflow.com/a/2450976\nfunction shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n};\n\n/*\n * set up the event listener for a card. If a card is clicked:\n *  - display the card's symbol (put this functionality in another function that you call from this one)\n *  - add the card to a *list* of \"open\" cards (put this functionality in another function that you call from this one)\n *  - if the list already has another card, check to see if the two cards match\n *    + if the cards do match, lock the cards in the open position (put this functionality in another function that you call from this one)\n *    + if the cards do not match, remove the cards from the list and hide the card's symbol (put this functionality in another function that you call from this one)\n *    + increment the move counter and display it on the page (put this functionality in another function that you call from this one)\n *    + if all cards have matched, display a message with the final score (put this functionality in another function that you call from this one)\n */\nfunction createEventListeners() {\n  let openedCards = [];\n  const cards = [...document.querySelectorAll('.card')];\n  cards.forEach(card => card.addEventListener('click', (e) => {\n    openCard(e);\n    checkOpenedCards(openedCards, e);\n  }));\n\n};\n\n/**\n * Display the card that has been clicked on\n */\nfunction openCard(e) {\n  // Grab the classes of the card that has been clicked\n  const cardClasses = e.target.classList;\n\n  // Check if the card has been opened, if not, open the card\n  if (cardClasses.contains('show') && cardClasses.contains('open')) {\n    return;\n  } else {\n    e.target.classList.add('show', 'open');\n  }\n};\n\n/**\n * Hold a list of all open cards\n */\nfunction checkOpenedCards(openedCards, e) {\n  const cardName = e.target.firstElementChild.classList[1];\n  // Add the card name to the array\n  openedCards.push(cardName);\n\n};\n\n/**\n * Start the game\n */\ncreateGame();\n});\n"]}