{"version":3,"sources":["app.js"],"names":["document","addEventListener","querySelectorAll","moveCounter","querySelector","cards","moves","matchedCardPairs","createGame","shuffledCards","array","currentIndex","length","createEventListeners","randomIndex","floor","Math","random","temporaryValue","shuffle","deck","fragment","createDocumentFragment","x","_i$classList","li","createElement","i","cardClasses","firstElementChild","classList","add","apply","_toConsumableArray","appendChild","newCards","forEach","card","e","firstOpenCard","secondOpenCard","isCardShowing","isCardOpen","amountOfStars","target","className","includes","nodeName","isCardClosed","openedCards","stars","children","textContent","removeChild","childNodes","push","split","setTimeout","checkOpenedCards","pairNotMatched","alert"],"mappings":"sJAAAA,SAASC,iBAAiB,mBAAoB,WAA9CD,IAAAA,EAAAA,GAAAA,OAAAA,mBAASC,SAAiBC,iBAAoB,WAOtCC,EAAcH,SAASI,cAAc,UAHrCC,EAAAA,SAAAA,cAAAA,UAKFC,EAAQ,EAHZC,EAAA,EACMJ,EAAcH,GAYpB,SAASQ,IACP,IAAMC,EAmCR,SAAiBC,GALf,IAAAC,EAAAD,EAAAE,OACAC,OAAAA,EACDC,OAAAA,EAED,KAAA,IAAAH,GACAG,EAAiBJ,KAAjBK,MAAwBC,KAAAC,SAAAN,GAEtBO,EAAIA,EADJP,GAAIA,GAEJD,EAAII,GAAJJ,EAAAI,GAOEJ,EAAMI,GAAeI,EAHrBP,OAAAA,EA1CoBQ,CAAQd,GACxBe,EAAOpB,SAASI,cAAc,SAC9BiB,EAAWrB,SAASsB,yBAD1BF,EAAMA,UAAOpB,GACbG,EAAMkB,YAAoBC,EAS1B,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAcG,OAAQW,IAAK,CAAA,IAAAC,EAEvCC,EAAKzB,SAAS0B,cAAc,MAC5BC,EAAI3B,SAAS0B,cAAc,KAG3BE,EAAcnB,EAAcc,GAAGM,kBAAkBC,UAHvDL,EAAAK,UAAU9B,IAAS0B,SAOnBF,EAAAG,EAAEG,WAAUC,IAAZC,MAAAR,EAAAS,mBAAmBL,IAJnBH,EAAAS,YAAMN,GAONP,EAASa,YAAYT,GAIvBL,EAAKc,YAAYb,GAmCXc,GAAAA,OAAAA,mBAAenC,SAASE,iBAAiB,WAEtCkC,QAAQ,SAAAC,GAAA,OACfA,EAAKpC,iBAAiB,QAAS,SAAAqC,GALnC,IAkDQC,EALRC,EAXCH,EA9BCC,EAsBMG,EALRC,EAwCCC,EA7DQ9B,GAAAA,EAAT+B,OAAgCC,UAAAC,SAAA,QASA,OAAtBR,EAAEM,OAAOG,UAAqBC,GAAgBC,EAAYrC,OAAS,IAiBrE6B,GAtBNH,EAASF,GAsBeQ,OAAOC,UAAUC,SAAS,QALpDJ,EAAAJ,EAAAM,OAAAC,UAAAC,SAAA,QAGAL,GAAqBC,IACnBJ,EAAAM,OAAAd,UAAAC,IAAA,OAAA,QAoCDY,EAAAO,EAAAC,SAAAvC,OAEDN,IAIQqC,KAGNxC,EAAYiD,YAAc9C,IAHWM,IAA/B+B,EAOJO,EAAMG,YAAYH,EAAMI,WAAW,IALrChD,IAAAA,GAAAA,IAAAA,GACAH,EAAAA,YAAYiD,EAAc9C,WAA1B,KApCD+B,EA7BQpC,EA6BR2C,OAEDK,EAAAM,KAAAlB,GAvBmC,IAAvBY,EAAYrC,SAqChB2B,EAAgBU,EAAY,GAAGE,SAAS,GAAGN,UAAUW,MAAM,KAAK,GALxEhB,EAAAS,EAAA,GAAAE,SAAA,GAAAN,UAAAW,MAAA,KAAA,GAGAC,WAASC,WACPnB,IAAAC,GA+BFS,EAAAb,QAAA,SAAAC,GAOIA,EAAKP,UAAUC,IAAI,WAGrBkB,EAAc,GAJd,KADF1C,GAkCEA,MAAAA,aAAmBA,EAAnBA,kCAAAD,EAAAC,OAfA0C,EAAYb,QAAQ,SAAAC,GALtBA,EAAAP,UAAAC,IAAA,WASI0B,WAAW,WALfpB,EAASsB,UAAAA,OAAiB,OAAA,OAAA,YACxBV,OAGEA,EAAA,KArDFQ,WAuEAG,SAAAA,cAAmBrD,YAAAA,iBAAnB,QAAA,WAZA0C,EAKA3C,EAAQ,EAJT2C,EAAA,GAmBCzC,MAAAA","file":"app.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n  /*\n  * Create a array that holds all of your cards\n  */\n  const cards = [...document.querySelectorAll('.card')];\n\n  // Create global variables\n  const moveCounter = document.querySelector('.moves');\n  const stars = document.querySelector('.stars');\n  let moves = 0;\n  let matchedCardPairs = 0;\n  let openedCards = [];\n\n  /*\n  * Display the cards on the page\n  *   - shuffle the list of cards using the provided \"shuffle\" method below\n  *   - loop through each card and create its HTML\n  *   - add each card's HTML to the page\n  */\n  function createGame() {\n    const shuffledCards = shuffle(cards);\n    const deck = document.querySelector('.deck');\n    const fragment = document.createDocumentFragment();\n\n    // Reset HTML DOM\n    deck.innerHTML = '';\n    moveCounter.textContent = moves;\n\n    /**\n     * Create the HTML for each card and add to the Document Fragment\n     */\n    for (let x = 0; x < shuffledCards.length; x++) {\n      // Create new HTML elements that will be used\n      const li = document.createElement('li');\n      const i = document.createElement('i');\n\n      // Get DOMList of classes to be displayed on the card\n      const cardClasses = shuffledCards[x].firstElementChild.classList;\n\n      // Apply the classes to each card\n      li.classList.add('card');\n      i.classList.add(...cardClasses);\n\n      li.appendChild(i);\n      fragment.appendChild(li);\n    }\n\n    // Add new deck to HTML DOM\n    deck.appendChild(fragment);\n\n    // Add event listeners to newly created DOM Elements\n    createEventListeners();\n  }\n\n  // Shuffle function from http://stackoverflow.com/a/2450976\n  function shuffle(array) {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  /*\n  * set up the event listener for a card. If a card is clicked:\n  *  - display the card's symbol (put this functionality in another function that you call from this one)\n  *  - add the card to a *list* of \"open\" cards (put this functionality in another function that you call from this one)\n  *  - if the list already has another card, check to see if the two cards match\n  *    + if the cards do match, lock the cards in the open position (put this functionality in another function that you call from this one)\n  *    + if the cards do not match, remove the cards from the list and hide the card's symbol (put this functionality in another function that you call from this one)\n  *    + increment the move counter and display it on the page (put this functionality in another function that you call from this one)\n  *    + if all cards have matched, display a message with the final score (put this functionality in another function that you call from this one)\n  */\n  function createEventListeners() {\n    // Select new cards from DOM\n    const newCards = [...document.querySelectorAll('.card')];\n\n    newCards.forEach(card =>\n      card.addEventListener('click', e => {\n        const isCardClosed = !e.target.className.includes('open');\n\n        // Only handle the click event for \"li\" elements that are closed\n        if (e.target.nodeName === 'LI' && isCardClosed && openedCards.length < 2) {\n          showCard(e);\n          addCardToOpenedCards(e);\n\n          if (openedCards.length === 2) {\n            checkOpenedCards();\n          }\n        }\n      }),\n    );\n  }\n\n  /**\n   * Display the card that has been clicked on\n   */\n  function showCard(e) {\n    // Grab the classes of the card that has been clicked\n    const isCardShowing = e.target.className.includes('show');\n    const isCardOpen = e.target.className.includes('open');\n\n    // Check if the card has been opened, if not, open the card\n    if (!isCardShowing && !isCardOpen) {\n      e.target.classList.add('show', 'open');\n      countMoves();\n    }\n  }\n\n  /**\n   * Add card to a array of all open cards\n   */\n  function addCardToOpenedCards(e) {\n    const card = e.target;\n\n    openedCards.push(card);\n  }\n\n  /**\n   * Check if the currently opened cards match\n   */\n  function checkOpenedCards() {\n    // Get the descriptive classname for both cards (fa-bolt, fa-cube)\n    const firstOpenCard = openedCards[0].children[0].className.split(' ')[1];\n    const secondOpenCard = openedCards[1].children[0].className.split(' ')[1];\n\n    // Allow for a delay so that both cards are showed to the user\n    setTimeout(() => {\n      if (firstOpenCard === secondOpenCard) {\n        matchedPair();\n      } else {\n        pairNotMatched();\n      }\n    }, 700);\n  }\n\n  /**\n   * Count moves each time card is clicked\n   */\n  function countMoves() {\n    const amountOfStars = stars.children.length;\n\n    moves++;\n    moveCounter.textContent = moves;\n\n    // Remove stars above a certain score threshold\n    if (moves >= 14 && amountOfStars === 3) {\n      stars.removeChild(stars.childNodes[0]);\n    } else if (moves >= 20 && amountOfStars === 2) {\n      stars.removeChild(stars.childNodes[0]);\n    }\n  }\n\n  /**\n   * If the cards match, lock them.\n   * Reset currently opened card \"tracking\"\n   * Count the matched pairs\n   */\n  function matchedPair() {\n    openedCards.forEach(card => {\n      card.classList.add('match');\n    });\n\n    openedCards = [];\n    matchedCardPairs++;\n\n    // Check game winning condition\n    if (matchedCardPairs === 8) {\n      gameWon();\n    }\n  }\n\n  /**\n   * If the cards do not match, hide them and reset opened cards\n   * Reset currently opened card \"tracking\"\n   */\n  function pairNotMatched() {\n    openedCards.forEach(card => {\n      card.classList.add('noMatch');\n\n      // Allow for time so that \"noMatch\" animation completes\n      setTimeout(() => {\n        card.classList.remove('show', 'open', 'noMatch');\n      }, 600);\n    });\n\n    openedCards = [];\n  }\n\n  // Reset global variables\n  function resetGame() {\n    moves = 0;\n    matchedCardPairs = 0;\n    openedCards = [];\n  }\n\n  // If game won, alert the user\n  function gameWon() {\n    alert(`Game won. ${matchedCardPairs} Matched pairs with a score of ${moves}.`);\n  }\n\n  /**\n   * Restart the game\n   */\n  document.querySelector('.restart').addEventListener('click', () => {\n    resetGame();\n    createGame();\n  });\n\n  /**\n   * Starts the game on page load\n   */\n  createGame();\n});\n"]}